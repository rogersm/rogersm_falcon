// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: firmware.proto

package firmware

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The list below is gleaned from
// http://blog.mateusz.perlak.com/index.php/2016/12/05/max-falcon-8-keyboard-hacking/
type Modifiers int32

const (
	Modifiers_NoModifier     Modifiers = 0
	Modifiers_LCtr           Modifiers = 1
	Modifiers_LShi           Modifiers = 2
	Modifiers_LAlt           Modifiers = 3
	Modifiers_LWin           Modifiers = 4
	Modifiers_RCtr           Modifiers = 5
	Modifiers_RShi           Modifiers = 6
	Modifiers_RAlt           Modifiers = 7
	Modifiers_RWin           Modifiers = 8
	Modifiers_RWin_RSHi      Modifiers = 9
	Modifiers_RWin_RCtr      Modifiers = 10
	Modifiers_RWin_RAlt      Modifiers = 11
	Modifiers_RWin_RCtr_RShi Modifiers = 12
	Modifiers_RCtr_RAlt      Modifiers = 13
	Modifiers_RCtr_RShi      Modifiers = 14
	Modifiers_RAlt_RShi      Modifiers = 15
	Modifiers_RAlt_RCtr_Rshi Modifiers = 16
)

// Enum value maps for Modifiers.
var (
	Modifiers_name = map[int32]string{
		0:  "NoModifier",
		1:  "LCtr",
		2:  "LShi",
		3:  "LAlt",
		4:  "LWin",
		5:  "RCtr",
		6:  "RShi",
		7:  "RAlt",
		8:  "RWin",
		9:  "RWin_RSHi",
		10: "RWin_RCtr",
		11: "RWin_RAlt",
		12: "RWin_RCtr_RShi",
		13: "RCtr_RAlt",
		14: "RCtr_RShi",
		15: "RAlt_RShi",
		16: "RAlt_RCtr_Rshi",
	}
	Modifiers_value = map[string]int32{
		"NoModifier":     0,
		"LCtr":           1,
		"LShi":           2,
		"LAlt":           3,
		"LWin":           4,
		"RCtr":           5,
		"RShi":           6,
		"RAlt":           7,
		"RWin":           8,
		"RWin_RSHi":      9,
		"RWin_RCtr":      10,
		"RWin_RAlt":      11,
		"RWin_RCtr_RShi": 12,
		"RCtr_RAlt":      13,
		"RCtr_RShi":      14,
		"RAlt_RShi":      15,
		"RAlt_RCtr_Rshi": 16,
	}
)

func (x Modifiers) Enum() *Modifiers {
	p := new(Modifiers)
	*p = x
	return p
}

func (x Modifiers) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Modifiers) Descriptor() protoreflect.EnumDescriptor {
	return file_firmware_proto_enumTypes[0].Descriptor()
}

func (Modifiers) Type() protoreflect.EnumType {
	return &file_firmware_proto_enumTypes[0]
}

func (x Modifiers) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Modifiers.Descriptor instead.
func (Modifiers) EnumDescriptor() ([]byte, []int) {
	return file_firmware_proto_rawDescGZIP(), []int{0}
}

type HIDKeyboardKey int32

const (
	// enumerations must start with 0. DO NOT USE.
	HIDKeyboardKey_NULL                        HIDKeyboardKey = 0
	HIDKeyboardKey_KEY_ErrorRollOver           HIDKeyboardKey = 1
	HIDKeyboardKey_KEY_POSTFail                HIDKeyboardKey = 2
	HIDKeyboardKey_KEY_ErrorUndefined          HIDKeyboardKey = 3
	HIDKeyboardKey_KEY_a_A                     HIDKeyboardKey = 4
	HIDKeyboardKey_KEY_b_B                     HIDKeyboardKey = 5
	HIDKeyboardKey_KEY_c_C                     HIDKeyboardKey = 6
	HIDKeyboardKey_KEY_d_D                     HIDKeyboardKey = 7
	HIDKeyboardKey_KEY_e_E                     HIDKeyboardKey = 8
	HIDKeyboardKey_KEY_f_F                     HIDKeyboardKey = 9
	HIDKeyboardKey_KEY_g_G                     HIDKeyboardKey = 10
	HIDKeyboardKey_KEY_h_H                     HIDKeyboardKey = 11
	HIDKeyboardKey_KEY_i_I                     HIDKeyboardKey = 12
	HIDKeyboardKey_KEY_j_J                     HIDKeyboardKey = 13
	HIDKeyboardKey_KEY_k_K                     HIDKeyboardKey = 14
	HIDKeyboardKey_KEY_l_L                     HIDKeyboardKey = 15
	HIDKeyboardKey_KEY_m_M                     HIDKeyboardKey = 16
	HIDKeyboardKey_KEY_n_N                     HIDKeyboardKey = 17
	HIDKeyboardKey_KEY_o_O                     HIDKeyboardKey = 18
	HIDKeyboardKey_KEY_p_P                     HIDKeyboardKey = 19
	HIDKeyboardKey_KEY_q_Q                     HIDKeyboardKey = 20
	HIDKeyboardKey_KEY_r_R                     HIDKeyboardKey = 21
	HIDKeyboardKey_KEY_s_S                     HIDKeyboardKey = 22
	HIDKeyboardKey_KEY_t_T                     HIDKeyboardKey = 23
	HIDKeyboardKey_KEY_u_U                     HIDKeyboardKey = 24
	HIDKeyboardKey_KEY_v_V                     HIDKeyboardKey = 25
	HIDKeyboardKey_KEY_w_W                     HIDKeyboardKey = 26
	HIDKeyboardKey_KEY_x_X                     HIDKeyboardKey = 27
	HIDKeyboardKey_KEY_y_Y                     HIDKeyboardKey = 28
	HIDKeyboardKey_KEY_z_Z                     HIDKeyboardKey = 29
	HIDKeyboardKey_KEY_1_Exclamation           HIDKeyboardKey = 30
	HIDKeyboardKey_KEY_2_At                    HIDKeyboardKey = 31
	HIDKeyboardKey_KEY_3_Pound                 HIDKeyboardKey = 32
	HIDKeyboardKey_KEY_4_Dollar                HIDKeyboardKey = 33
	HIDKeyboardKey_KEY_5_Percent               HIDKeyboardKey = 34
	HIDKeyboardKey_KEY_6_Caret                 HIDKeyboardKey = 35
	HIDKeyboardKey_KEY_7_Ampersand             HIDKeyboardKey = 36
	HIDKeyboardKey_KEY_8_Asterisk              HIDKeyboardKey = 37
	HIDKeyboardKey_KEY_9_LeftParenthesis       HIDKeyboardKey = 38
	HIDKeyboardKey_KEY_0_RightParenthesis      HIDKeyboardKey = 39
	HIDKeyboardKey_KEY_ReturnEnter             HIDKeyboardKey = 40
	HIDKeyboardKey_KEY_Escape                  HIDKeyboardKey = 41
	HIDKeyboardKey_KEY_DeleteBackspace         HIDKeyboardKey = 42
	HIDKeyboardKey_KEY_Tab                     HIDKeyboardKey = 43
	HIDKeyboardKey_KEY_Spacebar                HIDKeyboardKey = 44
	HIDKeyboardKey_KEY_Dash_Underscore         HIDKeyboardKey = 45
	HIDKeyboardKey_KEY_Equal_Plus              HIDKeyboardKey = 46
	HIDKeyboardKey_KEY_LeftBracket_LeftBrace   HIDKeyboardKey = 47
	HIDKeyboardKey_KEY_RightBracket_RightBrace HIDKeyboardKey = 48
	HIDKeyboardKey_KEY_Backslash_Pipe          HIDKeyboardKey = 49
	HIDKeyboardKey_KEY_NonUS_Pound_Tilde       HIDKeyboardKey = 50
	HIDKeyboardKey_KEY_Semicolon_Colon         HIDKeyboardKey = 51
	HIDKeyboardKey_KEY_SingleQuote_DoubleQuote HIDKeyboardKey = 52
	HIDKeyboardKey_KEY_GraveAccent_Tilde       HIDKeyboardKey = 53
	HIDKeyboardKey_KEY_Comma_LessThan          HIDKeyboardKey = 54
	HIDKeyboardKey_KEY_Period_GreaterThan      HIDKeyboardKey = 55
	HIDKeyboardKey_KEY_Slash_Question          HIDKeyboardKey = 56
	HIDKeyboardKey_KEY_CapsLock                HIDKeyboardKey = 57
	HIDKeyboardKey_KEY_F1                      HIDKeyboardKey = 58
	HIDKeyboardKey_KEY_F2                      HIDKeyboardKey = 59
	HIDKeyboardKey_KEY_F3                      HIDKeyboardKey = 60
	HIDKeyboardKey_KEY_F4                      HIDKeyboardKey = 61
	HIDKeyboardKey_KEY_F5                      HIDKeyboardKey = 62
	HIDKeyboardKey_KEY_F6                      HIDKeyboardKey = 63
	HIDKeyboardKey_KEY_F7                      HIDKeyboardKey = 64
	HIDKeyboardKey_KEY_F8                      HIDKeyboardKey = 65
	HIDKeyboardKey_KEY_F9                      HIDKeyboardKey = 66
	HIDKeyboardKey_KEY_F10                     HIDKeyboardKey = 67
	HIDKeyboardKey_KEY_F11                     HIDKeyboardKey = 68
	HIDKeyboardKey_KEY_F12                     HIDKeyboardKey = 69
	HIDKeyboardKey_KEY_PrintScreen             HIDKeyboardKey = 70
	HIDKeyboardKey_KEY_ScrollLock              HIDKeyboardKey = 71
	HIDKeyboardKey_KEY_Pause                   HIDKeyboardKey = 72
	HIDKeyboardKey_KEY_Insert                  HIDKeyboardKey = 73
	HIDKeyboardKey_KEY_Home                    HIDKeyboardKey = 74
	HIDKeyboardKey_KEY_PageUp                  HIDKeyboardKey = 75
	HIDKeyboardKey_KEY_DeleteForward           HIDKeyboardKey = 76
	HIDKeyboardKey_KEY_End                     HIDKeyboardKey = 77
	HIDKeyboardKey_KEY_PageDown                HIDKeyboardKey = 78
	HIDKeyboardKey_KEY_RightArrow              HIDKeyboardKey = 79
	HIDKeyboardKey_KEY_LeftArrow               HIDKeyboardKey = 80
	HIDKeyboardKey_KEY_DownArrow               HIDKeyboardKey = 81
	HIDKeyboardKey_KEY_UpArrow                 HIDKeyboardKey = 82
	HIDKeyboardKey_KEYPAD_NumLock_Clear        HIDKeyboardKey = 83
	HIDKeyboardKey_KEYPAD_Slash                HIDKeyboardKey = 84
	HIDKeyboardKey_KEYPAD_Asterisk             HIDKeyboardKey = 85
	HIDKeyboardKey_KEYPAD_Minus                HIDKeyboardKey = 86
	HIDKeyboardKey_KEYPAD_Plus                 HIDKeyboardKey = 87
	HIDKeyboardKey_KEYPAD_ENTER                HIDKeyboardKey = 88
	HIDKeyboardKey_KEYPAD_1_End                HIDKeyboardKey = 89
	HIDKeyboardKey_KEYPAD_2_DownArrow          HIDKeyboardKey = 90
	HIDKeyboardKey_KEYPAD_3_PageDown           HIDKeyboardKey = 91
	HIDKeyboardKey_KEYPAD_4_LeftArrow          HIDKeyboardKey = 92
	HIDKeyboardKey_KEYPAD_5                    HIDKeyboardKey = 93
	HIDKeyboardKey_KEYPAD_6_RightArrow         HIDKeyboardKey = 94
	HIDKeyboardKey_KEYPAD_7_Home               HIDKeyboardKey = 95
	HIDKeyboardKey_KEYPAD_8_UpArrow            HIDKeyboardKey = 96
	HIDKeyboardKey_KEYPAD_9_PageUp             HIDKeyboardKey = 97
	HIDKeyboardKey_KEYPAD_0_Insert             HIDKeyboardKey = 98
	HIDKeyboardKey_KEYPAD_Period_Delete        HIDKeyboardKey = 99
	HIDKeyboardKey_KEY_NonUS_Backslash_Pipe    HIDKeyboardKey = 100
	HIDKeyboardKey_KEY_Application             HIDKeyboardKey = 101
	HIDKeyboardKey_KEY_Power                   HIDKeyboardKey = 102
	HIDKeyboardKey_KEYPAD_Equal                HIDKeyboardKey = 103
	HIDKeyboardKey_KEY_F13                     HIDKeyboardKey = 104
	HIDKeyboardKey_KEY_F14                     HIDKeyboardKey = 105
	HIDKeyboardKey_KEY_F15                     HIDKeyboardKey = 106
	HIDKeyboardKey_KEY_F16                     HIDKeyboardKey = 107
	HIDKeyboardKey_KEY_F17                     HIDKeyboardKey = 108
	HIDKeyboardKey_KEY_F18                     HIDKeyboardKey = 109
	HIDKeyboardKey_KEY_F19                     HIDKeyboardKey = 110
	HIDKeyboardKey_KEY_F20                     HIDKeyboardKey = 111
	HIDKeyboardKey_KEY_F21                     HIDKeyboardKey = 112
	HIDKeyboardKey_KEY_F22                     HIDKeyboardKey = 113
	HIDKeyboardKey_KEY_F23                     HIDKeyboardKey = 114
	HIDKeyboardKey_KEY_F24                     HIDKeyboardKey = 115
	HIDKeyboardKey_KEY_Execute                 HIDKeyboardKey = 116
	HIDKeyboardKey_KEY_Help                    HIDKeyboardKey = 117
	HIDKeyboardKey_KEY_Menu                    HIDKeyboardKey = 118
	HIDKeyboardKey_KEY_Select                  HIDKeyboardKey = 119
	HIDKeyboardKey_KEY_Stop                    HIDKeyboardKey = 120
	HIDKeyboardKey_KEY_Again                   HIDKeyboardKey = 121
	HIDKeyboardKey_KEY_Undo                    HIDKeyboardKey = 122
	HIDKeyboardKey_KEY_Cut                     HIDKeyboardKey = 123
	HIDKeyboardKey_KEY_Copy                    HIDKeyboardKey = 124
	HIDKeyboardKey_KEY_Paste                   HIDKeyboardKey = 125
	HIDKeyboardKey_KEY_Find                    HIDKeyboardKey = 126
	HIDKeyboardKey_KEY_Mute                    HIDKeyboardKey = 127
	HIDKeyboardKey_KEY_VolumeUp                HIDKeyboardKey = 128
	HIDKeyboardKey_KEY_VolumeDown              HIDKeyboardKey = 129
	HIDKeyboardKey_KEY_LockingCapsLock         HIDKeyboardKey = 130
	HIDKeyboardKey_KEY_LockingNumLock          HIDKeyboardKey = 131
	HIDKeyboardKey_KEY_LockingScrollLock       HIDKeyboardKey = 132
	HIDKeyboardKey_KEYPAD_Comma                HIDKeyboardKey = 133
	HIDKeyboardKey_KEYPAD_EqualSign            HIDKeyboardKey = 134
	HIDKeyboardKey_KEY_International1          HIDKeyboardKey = 135
	HIDKeyboardKey_KEY_International2          HIDKeyboardKey = 136
	HIDKeyboardKey_KEY_International3          HIDKeyboardKey = 137
	HIDKeyboardKey_KEY_International4          HIDKeyboardKey = 138
	HIDKeyboardKey_KEY_International5          HIDKeyboardKey = 139
	HIDKeyboardKey_KEY_International6          HIDKeyboardKey = 140
	HIDKeyboardKey_KEY_International7          HIDKeyboardKey = 141
	HIDKeyboardKey_KEY_International8          HIDKeyboardKey = 142
	HIDKeyboardKey_KEY_International9          HIDKeyboardKey = 143
	HIDKeyboardKey_KEY_LANG1                   HIDKeyboardKey = 144
	HIDKeyboardKey_KEY_LANG2                   HIDKeyboardKey = 145
	HIDKeyboardKey_KEY_LANG3                   HIDKeyboardKey = 146
	HIDKeyboardKey_KEY_LANG4                   HIDKeyboardKey = 147
	HIDKeyboardKey_KEY_LANG5                   HIDKeyboardKey = 148
	HIDKeyboardKey_KEY_LANG6                   HIDKeyboardKey = 149
	HIDKeyboardKey_KEY_LANG7                   HIDKeyboardKey = 150
	HIDKeyboardKey_KEY_LANG8                   HIDKeyboardKey = 151
	HIDKeyboardKey_KEY_LANG9                   HIDKeyboardKey = 152
	HIDKeyboardKey_KEY_AlternateErase          HIDKeyboardKey = 153
	HIDKeyboardKey_KEY_SysReq_Attention        HIDKeyboardKey = 154
	HIDKeyboardKey_KEY_Cancel                  HIDKeyboardKey = 155
	HIDKeyboardKey_KEY_Clear                   HIDKeyboardKey = 156
	HIDKeyboardKey_KEY_Prior                   HIDKeyboardKey = 157
	HIDKeyboardKey_KEY_Return                  HIDKeyboardKey = 158
	HIDKeyboardKey_KEY_Separator               HIDKeyboardKey = 159
	HIDKeyboardKey_KEY_Out                     HIDKeyboardKey = 160
	HIDKeyboardKey_KEY_Oper                    HIDKeyboardKey = 161
	HIDKeyboardKey_KEY_Clear_Again             HIDKeyboardKey = 162
	HIDKeyboardKey_KEY_CrSel_Props             HIDKeyboardKey = 163
	HIDKeyboardKey_KEY_ExSel                   HIDKeyboardKey = 164
	HIDKeyboardKey_KEYPAD_00                   HIDKeyboardKey = 176
	HIDKeyboardKey_KEYPAD_000                  HIDKeyboardKey = 177
	HIDKeyboardKey_KEY_ThousandsSeparator      HIDKeyboardKey = 178
	HIDKeyboardKey_KEY_DecimalSeparator        HIDKeyboardKey = 179
	HIDKeyboardKey_KEY_CurrencyUnit            HIDKeyboardKey = 180
	HIDKeyboardKey_KEY_CurrencySubunit         HIDKeyboardKey = 181
	HIDKeyboardKey_KEYPAD_LeftParenthesis      HIDKeyboardKey = 182
	HIDKeyboardKey_KEYPAD_RightParenthesis     HIDKeyboardKey = 183
	HIDKeyboardKey_KEYPAD_LeftBrace            HIDKeyboardKey = 184
	HIDKeyboardKey_KEYPAD_RightBrace           HIDKeyboardKey = 185
	HIDKeyboardKey_KEYPAD_Tab                  HIDKeyboardKey = 186
	HIDKeyboardKey_KEYPAD_Backspace            HIDKeyboardKey = 187
	HIDKeyboardKey_KEYPAD_A                    HIDKeyboardKey = 188
	HIDKeyboardKey_KEYPAD_B                    HIDKeyboardKey = 189
	HIDKeyboardKey_KEYPAD_C                    HIDKeyboardKey = 190
	HIDKeyboardKey_KEYPAD_D                    HIDKeyboardKey = 191
	HIDKeyboardKey_KEYPAD_E                    HIDKeyboardKey = 192
	HIDKeyboardKey_KEYPAD_F                    HIDKeyboardKey = 193
	HIDKeyboardKey_KEYPAD_XOR                  HIDKeyboardKey = 194
	HIDKeyboardKey_KEYPAD_Caret                HIDKeyboardKey = 195
	HIDKeyboardKey_KEYPAD_Percent              HIDKeyboardKey = 196
	HIDKeyboardKey_KEYPAD_LessThan             HIDKeyboardKey = 197
	HIDKeyboardKey_KEYPAD_GreaterThan          HIDKeyboardKey = 198
	HIDKeyboardKey_KEYPAD_Ampersand            HIDKeyboardKey = 199
	HIDKeyboardKey_KEYPAD_AmpersandAmpersand   HIDKeyboardKey = 200
	HIDKeyboardKey_KEYPAD_Pipe                 HIDKeyboardKey = 201
	HIDKeyboardKey_KEYPAD_PipePipe             HIDKeyboardKey = 202
	HIDKeyboardKey_KEYPAD_Colon                HIDKeyboardKey = 203
	HIDKeyboardKey_KEYPAD_Pound                HIDKeyboardKey = 204
	HIDKeyboardKey_KEYPAD_Space                HIDKeyboardKey = 205
	HIDKeyboardKey_KEYPAD_At                   HIDKeyboardKey = 206
	HIDKeyboardKey_KEYPAD_Exclamation          HIDKeyboardKey = 207
	HIDKeyboardKey_KEYPAD_MemoryStore          HIDKeyboardKey = 208
	HIDKeyboardKey_KEYPAD_MemoryRecall         HIDKeyboardKey = 209
	HIDKeyboardKey_KEYPAD_MemoryClear          HIDKeyboardKey = 210
	HIDKeyboardKey_KEYPAD_MemoryAdd            HIDKeyboardKey = 211
	HIDKeyboardKey_KEYPAD_MemorySubtract       HIDKeyboardKey = 212
	HIDKeyboardKey_KEYPAD_MemoryMultiply       HIDKeyboardKey = 213
	HIDKeyboardKey_KEYPAD_MemoryDivide         HIDKeyboardKey = 214
	HIDKeyboardKey_KEYPAD_PlusMinus            HIDKeyboardKey = 215
	HIDKeyboardKey_KEYPAD_Clear                HIDKeyboardKey = 216
	HIDKeyboardKey_KEYPAD_ClearEntry           HIDKeyboardKey = 217
	HIDKeyboardKey_KEYPAD_Binary               HIDKeyboardKey = 218
	HIDKeyboardKey_KEYPAD_Octal                HIDKeyboardKey = 219
	HIDKeyboardKey_KEYPAD_Decimal              HIDKeyboardKey = 220
	HIDKeyboardKey_KEYPAD_Hexadecimal          HIDKeyboardKey = 221
	HIDKeyboardKey_KEY_LeftControl             HIDKeyboardKey = 224
	HIDKeyboardKey_KEY_LeftShift               HIDKeyboardKey = 225
	HIDKeyboardKey_KEY_LeftAlt                 HIDKeyboardKey = 226
	HIDKeyboardKey_KEY_LeftGUI                 HIDKeyboardKey = 227
	HIDKeyboardKey_KEY_RightControl            HIDKeyboardKey = 228
	HIDKeyboardKey_KEY_RightShift              HIDKeyboardKey = 229
	HIDKeyboardKey_KEY_RightAlt                HIDKeyboardKey = 230
	HIDKeyboardKey_KEY_RightGUI                HIDKeyboardKey = 231
	HIDKeyboardKey_MEDIAKEY_PLAY_PAUSE         HIDKeyboardKey = 0
	HIDKeyboardKey_MEDIAKEY_STOP               HIDKeyboardKey = 1
	HIDKeyboardKey_MEDIAKEY_PREV_TRACK         HIDKeyboardKey = 2
	HIDKeyboardKey_MEDIAKEY_NEXT_TRACK         HIDKeyboardKey = 3
	HIDKeyboardKey_MEDIAKEY_AUDIO_MUTE         HIDKeyboardKey = 4
	HIDKeyboardKey_MEDIAKEY_AUDIO_VOL_UP       HIDKeyboardKey = 5
	HIDKeyboardKey_MEDIAKEY_AUDIO_VOL_DOWN     HIDKeyboardKey = 6
	// NOTE: The following are not technically part of the HID
	// These are some common keys that are defined as part of the MAX falcon
	// programmer, so they are reproduced here.
	HIDKeyboardKey_Next_track     HIDKeyboardKey = 233
	HIDKeyboardKey_Previous_track HIDKeyboardKey = 234
	HIDKeyboardKey_Stop           HIDKeyboardKey = 235
	HIDKeyboardKey_Play_Pause     HIDKeyboardKey = 236
	HIDKeyboardKey_Mute           HIDKeyboardKey = 237
	HIDKeyboardKey_Vol_Up         HIDKeyboardKey = 238
	HIDKeyboardKey_Vol_Down       HIDKeyboardKey = 239
	HIDKeyboardKey_Media_Select   HIDKeyboardKey = 240
	HIDKeyboardKey_Mail           HIDKeyboardKey = 241
	HIDKeyboardKey_Calculator     HIDKeyboardKey = 242
	HIDKeyboardKey_WWW_Search     HIDKeyboardKey = 244
	HIDKeyboardKey_WWW_Home       HIDKeyboardKey = 245
	HIDKeyboardKey_WWW_Back       HIDKeyboardKey = 246
	HIDKeyboardKey_WWW_Forward    HIDKeyboardKey = 247
	HIDKeyboardKey_WWW_Stop       HIDKeyboardKey = 248
	HIDKeyboardKey_WWW_Refresh    HIDKeyboardKey = 249
	HIDKeyboardKey_WWW_Favorites  HIDKeyboardKey = 250
)

// Enum value maps for HIDKeyboardKey.
var (
	HIDKeyboardKey_name = map[int32]string{
		0:   "NULL",
		1:   "KEY_ErrorRollOver",
		2:   "KEY_POSTFail",
		3:   "KEY_ErrorUndefined",
		4:   "KEY_a_A",
		5:   "KEY_b_B",
		6:   "KEY_c_C",
		7:   "KEY_d_D",
		8:   "KEY_e_E",
		9:   "KEY_f_F",
		10:  "KEY_g_G",
		11:  "KEY_h_H",
		12:  "KEY_i_I",
		13:  "KEY_j_J",
		14:  "KEY_k_K",
		15:  "KEY_l_L",
		16:  "KEY_m_M",
		17:  "KEY_n_N",
		18:  "KEY_o_O",
		19:  "KEY_p_P",
		20:  "KEY_q_Q",
		21:  "KEY_r_R",
		22:  "KEY_s_S",
		23:  "KEY_t_T",
		24:  "KEY_u_U",
		25:  "KEY_v_V",
		26:  "KEY_w_W",
		27:  "KEY_x_X",
		28:  "KEY_y_Y",
		29:  "KEY_z_Z",
		30:  "KEY_1_Exclamation",
		31:  "KEY_2_At",
		32:  "KEY_3_Pound",
		33:  "KEY_4_Dollar",
		34:  "KEY_5_Percent",
		35:  "KEY_6_Caret",
		36:  "KEY_7_Ampersand",
		37:  "KEY_8_Asterisk",
		38:  "KEY_9_LeftParenthesis",
		39:  "KEY_0_RightParenthesis",
		40:  "KEY_ReturnEnter",
		41:  "KEY_Escape",
		42:  "KEY_DeleteBackspace",
		43:  "KEY_Tab",
		44:  "KEY_Spacebar",
		45:  "KEY_Dash_Underscore",
		46:  "KEY_Equal_Plus",
		47:  "KEY_LeftBracket_LeftBrace",
		48:  "KEY_RightBracket_RightBrace",
		49:  "KEY_Backslash_Pipe",
		50:  "KEY_NonUS_Pound_Tilde",
		51:  "KEY_Semicolon_Colon",
		52:  "KEY_SingleQuote_DoubleQuote",
		53:  "KEY_GraveAccent_Tilde",
		54:  "KEY_Comma_LessThan",
		55:  "KEY_Period_GreaterThan",
		56:  "KEY_Slash_Question",
		57:  "KEY_CapsLock",
		58:  "KEY_F1",
		59:  "KEY_F2",
		60:  "KEY_F3",
		61:  "KEY_F4",
		62:  "KEY_F5",
		63:  "KEY_F6",
		64:  "KEY_F7",
		65:  "KEY_F8",
		66:  "KEY_F9",
		67:  "KEY_F10",
		68:  "KEY_F11",
		69:  "KEY_F12",
		70:  "KEY_PrintScreen",
		71:  "KEY_ScrollLock",
		72:  "KEY_Pause",
		73:  "KEY_Insert",
		74:  "KEY_Home",
		75:  "KEY_PageUp",
		76:  "KEY_DeleteForward",
		77:  "KEY_End",
		78:  "KEY_PageDown",
		79:  "KEY_RightArrow",
		80:  "KEY_LeftArrow",
		81:  "KEY_DownArrow",
		82:  "KEY_UpArrow",
		83:  "KEYPAD_NumLock_Clear",
		84:  "KEYPAD_Slash",
		85:  "KEYPAD_Asterisk",
		86:  "KEYPAD_Minus",
		87:  "KEYPAD_Plus",
		88:  "KEYPAD_ENTER",
		89:  "KEYPAD_1_End",
		90:  "KEYPAD_2_DownArrow",
		91:  "KEYPAD_3_PageDown",
		92:  "KEYPAD_4_LeftArrow",
		93:  "KEYPAD_5",
		94:  "KEYPAD_6_RightArrow",
		95:  "KEYPAD_7_Home",
		96:  "KEYPAD_8_UpArrow",
		97:  "KEYPAD_9_PageUp",
		98:  "KEYPAD_0_Insert",
		99:  "KEYPAD_Period_Delete",
		100: "KEY_NonUS_Backslash_Pipe",
		101: "KEY_Application",
		102: "KEY_Power",
		103: "KEYPAD_Equal",
		104: "KEY_F13",
		105: "KEY_F14",
		106: "KEY_F15",
		107: "KEY_F16",
		108: "KEY_F17",
		109: "KEY_F18",
		110: "KEY_F19",
		111: "KEY_F20",
		112: "KEY_F21",
		113: "KEY_F22",
		114: "KEY_F23",
		115: "KEY_F24",
		116: "KEY_Execute",
		117: "KEY_Help",
		118: "KEY_Menu",
		119: "KEY_Select",
		120: "KEY_Stop",
		121: "KEY_Again",
		122: "KEY_Undo",
		123: "KEY_Cut",
		124: "KEY_Copy",
		125: "KEY_Paste",
		126: "KEY_Find",
		127: "KEY_Mute",
		128: "KEY_VolumeUp",
		129: "KEY_VolumeDown",
		130: "KEY_LockingCapsLock",
		131: "KEY_LockingNumLock",
		132: "KEY_LockingScrollLock",
		133: "KEYPAD_Comma",
		134: "KEYPAD_EqualSign",
		135: "KEY_International1",
		136: "KEY_International2",
		137: "KEY_International3",
		138: "KEY_International4",
		139: "KEY_International5",
		140: "KEY_International6",
		141: "KEY_International7",
		142: "KEY_International8",
		143: "KEY_International9",
		144: "KEY_LANG1",
		145: "KEY_LANG2",
		146: "KEY_LANG3",
		147: "KEY_LANG4",
		148: "KEY_LANG5",
		149: "KEY_LANG6",
		150: "KEY_LANG7",
		151: "KEY_LANG8",
		152: "KEY_LANG9",
		153: "KEY_AlternateErase",
		154: "KEY_SysReq_Attention",
		155: "KEY_Cancel",
		156: "KEY_Clear",
		157: "KEY_Prior",
		158: "KEY_Return",
		159: "KEY_Separator",
		160: "KEY_Out",
		161: "KEY_Oper",
		162: "KEY_Clear_Again",
		163: "KEY_CrSel_Props",
		164: "KEY_ExSel",
		176: "KEYPAD_00",
		177: "KEYPAD_000",
		178: "KEY_ThousandsSeparator",
		179: "KEY_DecimalSeparator",
		180: "KEY_CurrencyUnit",
		181: "KEY_CurrencySubunit",
		182: "KEYPAD_LeftParenthesis",
		183: "KEYPAD_RightParenthesis",
		184: "KEYPAD_LeftBrace",
		185: "KEYPAD_RightBrace",
		186: "KEYPAD_Tab",
		187: "KEYPAD_Backspace",
		188: "KEYPAD_A",
		189: "KEYPAD_B",
		190: "KEYPAD_C",
		191: "KEYPAD_D",
		192: "KEYPAD_E",
		193: "KEYPAD_F",
		194: "KEYPAD_XOR",
		195: "KEYPAD_Caret",
		196: "KEYPAD_Percent",
		197: "KEYPAD_LessThan",
		198: "KEYPAD_GreaterThan",
		199: "KEYPAD_Ampersand",
		200: "KEYPAD_AmpersandAmpersand",
		201: "KEYPAD_Pipe",
		202: "KEYPAD_PipePipe",
		203: "KEYPAD_Colon",
		204: "KEYPAD_Pound",
		205: "KEYPAD_Space",
		206: "KEYPAD_At",
		207: "KEYPAD_Exclamation",
		208: "KEYPAD_MemoryStore",
		209: "KEYPAD_MemoryRecall",
		210: "KEYPAD_MemoryClear",
		211: "KEYPAD_MemoryAdd",
		212: "KEYPAD_MemorySubtract",
		213: "KEYPAD_MemoryMultiply",
		214: "KEYPAD_MemoryDivide",
		215: "KEYPAD_PlusMinus",
		216: "KEYPAD_Clear",
		217: "KEYPAD_ClearEntry",
		218: "KEYPAD_Binary",
		219: "KEYPAD_Octal",
		220: "KEYPAD_Decimal",
		221: "KEYPAD_Hexadecimal",
		224: "KEY_LeftControl",
		225: "KEY_LeftShift",
		226: "KEY_LeftAlt",
		227: "KEY_LeftGUI",
		228: "KEY_RightControl",
		229: "KEY_RightShift",
		230: "KEY_RightAlt",
		231: "KEY_RightGUI",
		// Duplicate value: 0: "MEDIAKEY_PLAY_PAUSE",
		// Duplicate value: 1: "MEDIAKEY_STOP",
		// Duplicate value: 2: "MEDIAKEY_PREV_TRACK",
		// Duplicate value: 3: "MEDIAKEY_NEXT_TRACK",
		// Duplicate value: 4: "MEDIAKEY_AUDIO_MUTE",
		// Duplicate value: 5: "MEDIAKEY_AUDIO_VOL_UP",
		// Duplicate value: 6: "MEDIAKEY_AUDIO_VOL_DOWN",
		233: "Next_track",
		234: "Previous_track",
		235: "Stop",
		236: "Play_Pause",
		237: "Mute",
		238: "Vol_Up",
		239: "Vol_Down",
		240: "Media_Select",
		241: "Mail",
		242: "Calculator",
		244: "WWW_Search",
		245: "WWW_Home",
		246: "WWW_Back",
		247: "WWW_Forward",
		248: "WWW_Stop",
		249: "WWW_Refresh",
		250: "WWW_Favorites",
	}
	HIDKeyboardKey_value = map[string]int32{
		"NULL":                        0,
		"KEY_ErrorRollOver":           1,
		"KEY_POSTFail":                2,
		"KEY_ErrorUndefined":          3,
		"KEY_a_A":                     4,
		"KEY_b_B":                     5,
		"KEY_c_C":                     6,
		"KEY_d_D":                     7,
		"KEY_e_E":                     8,
		"KEY_f_F":                     9,
		"KEY_g_G":                     10,
		"KEY_h_H":                     11,
		"KEY_i_I":                     12,
		"KEY_j_J":                     13,
		"KEY_k_K":                     14,
		"KEY_l_L":                     15,
		"KEY_m_M":                     16,
		"KEY_n_N":                     17,
		"KEY_o_O":                     18,
		"KEY_p_P":                     19,
		"KEY_q_Q":                     20,
		"KEY_r_R":                     21,
		"KEY_s_S":                     22,
		"KEY_t_T":                     23,
		"KEY_u_U":                     24,
		"KEY_v_V":                     25,
		"KEY_w_W":                     26,
		"KEY_x_X":                     27,
		"KEY_y_Y":                     28,
		"KEY_z_Z":                     29,
		"KEY_1_Exclamation":           30,
		"KEY_2_At":                    31,
		"KEY_3_Pound":                 32,
		"KEY_4_Dollar":                33,
		"KEY_5_Percent":               34,
		"KEY_6_Caret":                 35,
		"KEY_7_Ampersand":             36,
		"KEY_8_Asterisk":              37,
		"KEY_9_LeftParenthesis":       38,
		"KEY_0_RightParenthesis":      39,
		"KEY_ReturnEnter":             40,
		"KEY_Escape":                  41,
		"KEY_DeleteBackspace":         42,
		"KEY_Tab":                     43,
		"KEY_Spacebar":                44,
		"KEY_Dash_Underscore":         45,
		"KEY_Equal_Plus":              46,
		"KEY_LeftBracket_LeftBrace":   47,
		"KEY_RightBracket_RightBrace": 48,
		"KEY_Backslash_Pipe":          49,
		"KEY_NonUS_Pound_Tilde":       50,
		"KEY_Semicolon_Colon":         51,
		"KEY_SingleQuote_DoubleQuote": 52,
		"KEY_GraveAccent_Tilde":       53,
		"KEY_Comma_LessThan":          54,
		"KEY_Period_GreaterThan":      55,
		"KEY_Slash_Question":          56,
		"KEY_CapsLock":                57,
		"KEY_F1":                      58,
		"KEY_F2":                      59,
		"KEY_F3":                      60,
		"KEY_F4":                      61,
		"KEY_F5":                      62,
		"KEY_F6":                      63,
		"KEY_F7":                      64,
		"KEY_F8":                      65,
		"KEY_F9":                      66,
		"KEY_F10":                     67,
		"KEY_F11":                     68,
		"KEY_F12":                     69,
		"KEY_PrintScreen":             70,
		"KEY_ScrollLock":              71,
		"KEY_Pause":                   72,
		"KEY_Insert":                  73,
		"KEY_Home":                    74,
		"KEY_PageUp":                  75,
		"KEY_DeleteForward":           76,
		"KEY_End":                     77,
		"KEY_PageDown":                78,
		"KEY_RightArrow":              79,
		"KEY_LeftArrow":               80,
		"KEY_DownArrow":               81,
		"KEY_UpArrow":                 82,
		"KEYPAD_NumLock_Clear":        83,
		"KEYPAD_Slash":                84,
		"KEYPAD_Asterisk":             85,
		"KEYPAD_Minus":                86,
		"KEYPAD_Plus":                 87,
		"KEYPAD_ENTER":                88,
		"KEYPAD_1_End":                89,
		"KEYPAD_2_DownArrow":          90,
		"KEYPAD_3_PageDown":           91,
		"KEYPAD_4_LeftArrow":          92,
		"KEYPAD_5":                    93,
		"KEYPAD_6_RightArrow":         94,
		"KEYPAD_7_Home":               95,
		"KEYPAD_8_UpArrow":            96,
		"KEYPAD_9_PageUp":             97,
		"KEYPAD_0_Insert":             98,
		"KEYPAD_Period_Delete":        99,
		"KEY_NonUS_Backslash_Pipe":    100,
		"KEY_Application":             101,
		"KEY_Power":                   102,
		"KEYPAD_Equal":                103,
		"KEY_F13":                     104,
		"KEY_F14":                     105,
		"KEY_F15":                     106,
		"KEY_F16":                     107,
		"KEY_F17":                     108,
		"KEY_F18":                     109,
		"KEY_F19":                     110,
		"KEY_F20":                     111,
		"KEY_F21":                     112,
		"KEY_F22":                     113,
		"KEY_F23":                     114,
		"KEY_F24":                     115,
		"KEY_Execute":                 116,
		"KEY_Help":                    117,
		"KEY_Menu":                    118,
		"KEY_Select":                  119,
		"KEY_Stop":                    120,
		"KEY_Again":                   121,
		"KEY_Undo":                    122,
		"KEY_Cut":                     123,
		"KEY_Copy":                    124,
		"KEY_Paste":                   125,
		"KEY_Find":                    126,
		"KEY_Mute":                    127,
		"KEY_VolumeUp":                128,
		"KEY_VolumeDown":              129,
		"KEY_LockingCapsLock":         130,
		"KEY_LockingNumLock":          131,
		"KEY_LockingScrollLock":       132,
		"KEYPAD_Comma":                133,
		"KEYPAD_EqualSign":            134,
		"KEY_International1":          135,
		"KEY_International2":          136,
		"KEY_International3":          137,
		"KEY_International4":          138,
		"KEY_International5":          139,
		"KEY_International6":          140,
		"KEY_International7":          141,
		"KEY_International8":          142,
		"KEY_International9":          143,
		"KEY_LANG1":                   144,
		"KEY_LANG2":                   145,
		"KEY_LANG3":                   146,
		"KEY_LANG4":                   147,
		"KEY_LANG5":                   148,
		"KEY_LANG6":                   149,
		"KEY_LANG7":                   150,
		"KEY_LANG8":                   151,
		"KEY_LANG9":                   152,
		"KEY_AlternateErase":          153,
		"KEY_SysReq_Attention":        154,
		"KEY_Cancel":                  155,
		"KEY_Clear":                   156,
		"KEY_Prior":                   157,
		"KEY_Return":                  158,
		"KEY_Separator":               159,
		"KEY_Out":                     160,
		"KEY_Oper":                    161,
		"KEY_Clear_Again":             162,
		"KEY_CrSel_Props":             163,
		"KEY_ExSel":                   164,
		"KEYPAD_00":                   176,
		"KEYPAD_000":                  177,
		"KEY_ThousandsSeparator":      178,
		"KEY_DecimalSeparator":        179,
		"KEY_CurrencyUnit":            180,
		"KEY_CurrencySubunit":         181,
		"KEYPAD_LeftParenthesis":      182,
		"KEYPAD_RightParenthesis":     183,
		"KEYPAD_LeftBrace":            184,
		"KEYPAD_RightBrace":           185,
		"KEYPAD_Tab":                  186,
		"KEYPAD_Backspace":            187,
		"KEYPAD_A":                    188,
		"KEYPAD_B":                    189,
		"KEYPAD_C":                    190,
		"KEYPAD_D":                    191,
		"KEYPAD_E":                    192,
		"KEYPAD_F":                    193,
		"KEYPAD_XOR":                  194,
		"KEYPAD_Caret":                195,
		"KEYPAD_Percent":              196,
		"KEYPAD_LessThan":             197,
		"KEYPAD_GreaterThan":          198,
		"KEYPAD_Ampersand":            199,
		"KEYPAD_AmpersandAmpersand":   200,
		"KEYPAD_Pipe":                 201,
		"KEYPAD_PipePipe":             202,
		"KEYPAD_Colon":                203,
		"KEYPAD_Pound":                204,
		"KEYPAD_Space":                205,
		"KEYPAD_At":                   206,
		"KEYPAD_Exclamation":          207,
		"KEYPAD_MemoryStore":          208,
		"KEYPAD_MemoryRecall":         209,
		"KEYPAD_MemoryClear":          210,
		"KEYPAD_MemoryAdd":            211,
		"KEYPAD_MemorySubtract":       212,
		"KEYPAD_MemoryMultiply":       213,
		"KEYPAD_MemoryDivide":         214,
		"KEYPAD_PlusMinus":            215,
		"KEYPAD_Clear":                216,
		"KEYPAD_ClearEntry":           217,
		"KEYPAD_Binary":               218,
		"KEYPAD_Octal":                219,
		"KEYPAD_Decimal":              220,
		"KEYPAD_Hexadecimal":          221,
		"KEY_LeftControl":             224,
		"KEY_LeftShift":               225,
		"KEY_LeftAlt":                 226,
		"KEY_LeftGUI":                 227,
		"KEY_RightControl":            228,
		"KEY_RightShift":              229,
		"KEY_RightAlt":                230,
		"KEY_RightGUI":                231,
		"MEDIAKEY_PLAY_PAUSE":         0,
		"MEDIAKEY_STOP":               1,
		"MEDIAKEY_PREV_TRACK":         2,
		"MEDIAKEY_NEXT_TRACK":         3,
		"MEDIAKEY_AUDIO_MUTE":         4,
		"MEDIAKEY_AUDIO_VOL_UP":       5,
		"MEDIAKEY_AUDIO_VOL_DOWN":     6,
		"Next_track":                  233,
		"Previous_track":              234,
		"Stop":                        235,
		"Play_Pause":                  236,
		"Mute":                        237,
		"Vol_Up":                      238,
		"Vol_Down":                    239,
		"Media_Select":                240,
		"Mail":                        241,
		"Calculator":                  242,
		"WWW_Search":                  244,
		"WWW_Home":                    245,
		"WWW_Back":                    246,
		"WWW_Forward":                 247,
		"WWW_Stop":                    248,
		"WWW_Refresh":                 249,
		"WWW_Favorites":               250,
	}
)

func (x HIDKeyboardKey) Enum() *HIDKeyboardKey {
	p := new(HIDKeyboardKey)
	*p = x
	return p
}

func (x HIDKeyboardKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HIDKeyboardKey) Descriptor() protoreflect.EnumDescriptor {
	return file_firmware_proto_enumTypes[1].Descriptor()
}

func (HIDKeyboardKey) Type() protoreflect.EnumType {
	return &file_firmware_proto_enumTypes[1]
}

func (x HIDKeyboardKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HIDKeyboardKey.Descriptor instead.
func (HIDKeyboardKey) EnumDescriptor() ([]byte, []int) {
	return file_firmware_proto_rawDescGZIP(), []int{1}
}

type ProgramSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exactly one of the Modifiers enum above. The default is 0 which is no
	// modifiers.
	Modifier Modifiers `protobuf:"varint,1,opt,name=modifier,proto3,enum=firmware.Modifiers" json:"modifier,omitempty"`
	// Between 0 and 30 ms. The default value is 0.
	MillisecondsBetweenKeys uint32 `protobuf:"varint,2,opt,name=milliseconds_between_keys,json=millisecondsBetweenKeys,proto3" json:"milliseconds_between_keys,omitempty"`
	// Maximum of 6 keys per program set. Although this is a `bytes` type, it
	// should be of maximum length 6. See firmware-format.md.
	Keys []HIDKeyboardKey `protobuf:"varint,3,rep,packed,name=keys,proto3,enum=firmware.HIDKeyboardKey" json:"keys,omitempty"`
}

func (x *ProgramSet) Reset() {
	*x = ProgramSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firmware_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramSet) ProtoMessage() {}

func (x *ProgramSet) ProtoReflect() protoreflect.Message {
	mi := &file_firmware_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramSet.ProtoReflect.Descriptor instead.
func (*ProgramSet) Descriptor() ([]byte, []int) {
	return file_firmware_proto_rawDescGZIP(), []int{0}
}

func (x *ProgramSet) GetModifier() Modifiers {
	if x != nil {
		return x.Modifier
	}
	return Modifiers_NoModifier
}

func (x *ProgramSet) GetMillisecondsBetweenKeys() uint32 {
	if x != nil {
		return x.MillisecondsBetweenKeys
	}
	return 0
}

func (x *ProgramSet) GetKeys() []HIDKeyboardKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Program struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Programs can contain up to 100 ProgramSet messages.
	// See firmware-format.md.
	ProgramSet []*ProgramSet `protobuf:"bytes,1,rep,name=program_set,json=programSet,proto3" json:"program_set,omitempty"`
}

func (x *Program) Reset() {
	*x = Program{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firmware_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Program) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Program) ProtoMessage() {}

func (x *Program) ProtoReflect() protoreflect.Message {
	mi := &file_firmware_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Program.ProtoReflect.Descriptor instead.
func (*Program) Descriptor() ([]byte, []int) {
	return file_firmware_proto_rawDescGZIP(), []int{1}
}

func (x *Program) GetProgramSet() []*ProgramSet {
	if x != nil {
		return x.ProgramSet
	}
	return nil
}

type ButtonBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A button binding can consist of either a "normal" key, or a Program.
	//
	// Types that are assignable to Binding:
	//
	//	*ButtonBinding_Key
	//	*ButtonBinding_String_
	//	*ButtonBinding_Program
	Binding isButtonBinding_Binding `protobuf_oneof:"binding"`
}

func (x *ButtonBinding) Reset() {
	*x = ButtonBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firmware_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ButtonBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ButtonBinding) ProtoMessage() {}

func (x *ButtonBinding) ProtoReflect() protoreflect.Message {
	mi := &file_firmware_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ButtonBinding.ProtoReflect.Descriptor instead.
func (*ButtonBinding) Descriptor() ([]byte, []int) {
	return file_firmware_proto_rawDescGZIP(), []int{2}
}

func (m *ButtonBinding) GetBinding() isButtonBinding_Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func (x *ButtonBinding) GetKey() HIDKeyboardKey {
	if x, ok := x.GetBinding().(*ButtonBinding_Key); ok {
		return x.Key
	}
	return HIDKeyboardKey_NULL
}

func (x *ButtonBinding) GetString_() string {
	if x, ok := x.GetBinding().(*ButtonBinding_String_); ok {
		return x.String_
	}
	return ""
}

func (x *ButtonBinding) GetProgram() *Program {
	if x, ok := x.GetBinding().(*ButtonBinding_Program); ok {
		return x.Program
	}
	return nil
}

type isButtonBinding_Binding interface {
	isButtonBinding_Binding()
}

type ButtonBinding_Key struct {
	// Although this is a `bytes` type, it should be of length 1 always.
	// See ../../firmware-format.md.
	Key HIDKeyboardKey `protobuf:"varint,1,opt,name=key,proto3,enum=firmware.HIDKeyboardKey,oneof"`
}

type ButtonBinding_String_ struct {
	String_ string `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}

type ButtonBinding_Program struct {
	Program *Program `protobuf:"bytes,3,opt,name=program,proto3,oneof"`
}

func (*ButtonBinding_Key) isButtonBinding_Binding() {}

func (*ButtonBinding_String_) isButtonBinding_Binding() {}

func (*ButtonBinding_Program) isButtonBinding_Binding() {}

// The important bits.
type ButtonBindings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Button1 *ButtonBinding `protobuf:"bytes,1,opt,name=button1,proto3" json:"button1,omitempty"`
	Button2 *ButtonBinding `protobuf:"bytes,2,opt,name=button2,proto3" json:"button2,omitempty"`
	Button3 *ButtonBinding `protobuf:"bytes,3,opt,name=button3,proto3" json:"button3,omitempty"`
	Button4 *ButtonBinding `protobuf:"bytes,4,opt,name=button4,proto3" json:"button4,omitempty"`
	Button5 *ButtonBinding `protobuf:"bytes,5,opt,name=button5,proto3" json:"button5,omitempty"`
	Button6 *ButtonBinding `protobuf:"bytes,6,opt,name=button6,proto3" json:"button6,omitempty"`
	Button7 *ButtonBinding `protobuf:"bytes,7,opt,name=button7,proto3" json:"button7,omitempty"`
	Button8 *ButtonBinding `protobuf:"bytes,8,opt,name=button8,proto3" json:"button8,omitempty"`
}

func (x *ButtonBindings) Reset() {
	*x = ButtonBindings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_firmware_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ButtonBindings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ButtonBindings) ProtoMessage() {}

func (x *ButtonBindings) ProtoReflect() protoreflect.Message {
	mi := &file_firmware_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ButtonBindings.ProtoReflect.Descriptor instead.
func (*ButtonBindings) Descriptor() ([]byte, []int) {
	return file_firmware_proto_rawDescGZIP(), []int{3}
}

func (x *ButtonBindings) GetButton1() *ButtonBinding {
	if x != nil {
		return x.Button1
	}
	return nil
}

func (x *ButtonBindings) GetButton2() *ButtonBinding {
	if x != nil {
		return x.Button2
	}
	return nil
}

func (x *ButtonBindings) GetButton3() *ButtonBinding {
	if x != nil {
		return x.Button3
	}
	return nil
}

func (x *ButtonBindings) GetButton4() *ButtonBinding {
	if x != nil {
		return x.Button4
	}
	return nil
}

func (x *ButtonBindings) GetButton5() *ButtonBinding {
	if x != nil {
		return x.Button5
	}
	return nil
}

func (x *ButtonBindings) GetButton6() *ButtonBinding {
	if x != nil {
		return x.Button6
	}
	return nil
}

func (x *ButtonBindings) GetButton7() *ButtonBinding {
	if x != nil {
		return x.Button7
	}
	return nil
}

func (x *ButtonBindings) GetButton8() *ButtonBinding {
	if x != nil {
		return x.Button8
	}
	return nil
}

var File_firmware_proto protoreflect.FileDescriptor

var file_firmware_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x48, 0x49, 0x44, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x22, 0x40, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x35, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x48, 0x49, 0x44, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x48,
	0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x2d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42,
	0x09, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xa8, 0x03, 0x0a, 0x0e, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a,
	0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x31,
	0x12, 0x31, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x32, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x33, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x34, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x35, 0x12, 0x31, 0x0a, 0x07,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x36, 0x12,
	0x31, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x37, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x38, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x38, 0x2a, 0xed, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x43, 0x74, 0x72, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x53, 0x68, 0x69, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x6c, 0x74, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x57, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x43, 0x74, 0x72, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x53, 0x68, 0x69, 0x10, 0x06, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x41, 0x6c, 0x74, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x57, 0x69,
	0x6e, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x57, 0x69, 0x6e, 0x5f, 0x52, 0x53, 0x48, 0x69,
	0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x57, 0x69, 0x6e, 0x5f, 0x52, 0x43, 0x74, 0x72, 0x10,
	0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x57, 0x69, 0x6e, 0x5f, 0x52, 0x41, 0x6c, 0x74, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x57, 0x69, 0x6e, 0x5f, 0x52, 0x43, 0x74, 0x72, 0x5f, 0x52, 0x53,
	0x68, 0x69, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x43, 0x74, 0x72, 0x5f, 0x52, 0x41, 0x6c,
	0x74, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x43, 0x74, 0x72, 0x5f, 0x52, 0x53, 0x68, 0x69,
	0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x6c, 0x74, 0x5f, 0x52, 0x53, 0x68, 0x69, 0x10,
	0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x41, 0x6c, 0x74, 0x5f, 0x52, 0x43, 0x74, 0x72, 0x5f, 0x52,
	0x73, 0x68, 0x69, 0x10, 0x10, 0x2a, 0xe5, 0x23, 0x0a, 0x0e, 0x48, 0x49, 0x44, 0x4b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x6f, 0x6c, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4b,
	0x45, 0x59, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x61, 0x5f, 0x41, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x62, 0x5f, 0x42, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x4b, 0x45, 0x59, 0x5f, 0x63, 0x5f, 0x43, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45,
	0x59, 0x5f, 0x64, 0x5f, 0x44, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x65,
	0x5f, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x66, 0x5f, 0x46, 0x10,
	0x09, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x67, 0x5f, 0x47, 0x10, 0x0a, 0x12, 0x0b,
	0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x68, 0x5f, 0x48, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x4b,
	0x45, 0x59, 0x5f, 0x69, 0x5f, 0x49, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f,
	0x6a, 0x5f, 0x4a, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x6b, 0x5f, 0x4b,
	0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x6c, 0x5f, 0x4c, 0x10, 0x0f, 0x12,
	0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x6d, 0x5f, 0x4d, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07,
	0x4b, 0x45, 0x59, 0x5f, 0x6e, 0x5f, 0x4e, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59,
	0x5f, 0x6f, 0x5f, 0x4f, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x70, 0x5f,
	0x50, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x71, 0x5f, 0x51, 0x10, 0x14,
	0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x72, 0x5f, 0x52, 0x10, 0x15, 0x12, 0x0b, 0x0a,
	0x07, 0x4b, 0x45, 0x59, 0x5f, 0x73, 0x5f, 0x53, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45,
	0x59, 0x5f, 0x74, 0x5f, 0x54, 0x10, 0x17, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x75,
	0x5f, 0x55, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x76, 0x5f, 0x56, 0x10,
	0x19, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x77, 0x5f, 0x57, 0x10, 0x1a, 0x12, 0x0b,
	0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x78, 0x5f, 0x58, 0x10, 0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x4b,
	0x45, 0x59, 0x5f, 0x79, 0x5f, 0x59, 0x10, 0x1c, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f,
	0x7a, 0x5f, 0x5a, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x45, 0x59, 0x5f, 0x31, 0x5f, 0x45,
	0x78, 0x63, 0x6c, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08,
	0x4b, 0x45, 0x59, 0x5f, 0x32, 0x5f, 0x41, 0x74, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45,
	0x59, 0x5f, 0x33, 0x5f, 0x50, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x4b,
	0x45, 0x59, 0x5f, 0x34, 0x5f, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x10, 0x21, 0x12, 0x11, 0x0a,
	0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x35, 0x5f, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x10, 0x22,
	0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x36, 0x5f, 0x43, 0x61, 0x72, 0x65, 0x74, 0x10,
	0x23, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x5f, 0x37, 0x5f, 0x41, 0x6d, 0x70, 0x65, 0x72,
	0x73, 0x61, 0x6e, 0x64, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x38, 0x5f,
	0x41, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6b, 0x10, 0x25, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x45,
	0x59, 0x5f, 0x39, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x10, 0x26, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x45, 0x59, 0x5f, 0x30, 0x5f, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x10,
	0x27, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x10, 0x28, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x10, 0x29, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x2a, 0x12,
	0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x61, 0x62, 0x10, 0x2b, 0x12, 0x10, 0x0a, 0x0c,
	0x4b, 0x45, 0x59, 0x5f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x62, 0x61, 0x72, 0x10, 0x2c, 0x12, 0x17,
	0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x61, 0x73, 0x68, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x10, 0x2d, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x5f, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x2e, 0x12, 0x1d, 0x0a, 0x19, 0x4b,
	0x45, 0x59, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x4c,
	0x65, 0x66, 0x74, 0x42, 0x72, 0x61, 0x63, 0x65, 0x10, 0x2f, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45,
	0x59, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x72, 0x61, 0x63, 0x65, 0x10, 0x30, 0x12, 0x16, 0x0a, 0x12, 0x4b,
	0x45, 0x59, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x50, 0x69, 0x70,
	0x65, 0x10, 0x31, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x6f, 0x6e, 0x55, 0x53,
	0x5f, 0x50, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x54, 0x69, 0x6c, 0x64, 0x65, 0x10, 0x32, 0x12, 0x17,
	0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x5f,
	0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x10, 0x33, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x59, 0x5f, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x10, 0x34, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x45, 0x59, 0x5f,
	0x47, 0x72, 0x61, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x69, 0x6c, 0x64,
	0x65, 0x10, 0x35, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x5f, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x36, 0x12, 0x1a, 0x0a, 0x16, 0x4b,
	0x45, 0x59, 0x5f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x37, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x53,
	0x6c, 0x61, 0x73, 0x68, 0x5f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x38, 0x12,
	0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x61, 0x70, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x10,
	0x39, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x31, 0x10, 0x3a, 0x12, 0x0a, 0x0a,
	0x06, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x32, 0x10, 0x3b, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59,
	0x5f, 0x46, 0x33, 0x10, 0x3c, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x34, 0x10,
	0x3d, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x35, 0x10, 0x3e, 0x12, 0x0a, 0x0a,
	0x06, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x36, 0x10, 0x3f, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59,
	0x5f, 0x46, 0x37, 0x10, 0x40, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x38, 0x10,
	0x41, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x39, 0x10, 0x42, 0x12, 0x0b, 0x0a,
	0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x31, 0x30, 0x10, 0x43, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45,
	0x59, 0x5f, 0x46, 0x31, 0x31, 0x10, 0x44, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46,
	0x31, 0x32, 0x10, 0x45, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x46, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59,
	0x5f, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x47, 0x12, 0x0d, 0x0a,
	0x09, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x48, 0x12, 0x0e, 0x0a, 0x0a,
	0x4b, 0x45, 0x59, 0x5f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x49, 0x12, 0x0c, 0x0a, 0x08,
	0x4b, 0x45, 0x59, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x10, 0x4a, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x45,
	0x59, 0x5f, 0x50, 0x61, 0x67, 0x65, 0x55, 0x70, 0x10, 0x4b, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x45,
	0x59, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10,
	0x4c, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x4d, 0x12, 0x10,
	0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x4e,
	0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x72,
	0x6f, 0x77, 0x10, 0x4f, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x65, 0x66, 0x74,
	0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x50, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x44,
	0x6f, 0x77, 0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x51, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45,
	0x59, 0x5f, 0x55, 0x70, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x52, 0x12, 0x18, 0x0a, 0x14, 0x4b,
	0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4e, 0x75, 0x6d, 0x4c, 0x6f, 0x63, 0x6b, 0x5f, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x10, 0x53, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x10, 0x54, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x50, 0x41,
	0x44, 0x5f, 0x41, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6b, 0x10, 0x55, 0x12, 0x10, 0x0a, 0x0c,
	0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x56, 0x12, 0x0f,
	0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x57, 0x12,
	0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x58, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x31, 0x5f, 0x45, 0x6e,
	0x64, 0x10, 0x59, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x32, 0x5f,
	0x44, 0x6f, 0x77, 0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x5a, 0x12, 0x15, 0x0a, 0x11, 0x4b,
	0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x33, 0x5f, 0x50, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x10, 0x5b, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x34, 0x5f, 0x4c,
	0x65, 0x66, 0x74, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x5c, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45,
	0x59, 0x50, 0x41, 0x44, 0x5f, 0x35, 0x10, 0x5d, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x50,
	0x41, 0x44, 0x5f, 0x36, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10,
	0x5e, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x37, 0x5f, 0x48, 0x6f,
	0x6d, 0x65, 0x10, 0x5f, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x38,
	0x5f, 0x55, 0x70, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x60, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45,
	0x59, 0x50, 0x41, 0x44, 0x5f, 0x39, 0x5f, 0x50, 0x61, 0x67, 0x65, 0x55, 0x70, 0x10, 0x61, 0x12,
	0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x30, 0x5f, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x10, 0x62, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x63, 0x12, 0x1c,
	0x0a, 0x18, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x6f, 0x6e, 0x55, 0x53, 0x5f, 0x42, 0x61, 0x63, 0x6b,
	0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x50, 0x69, 0x70, 0x65, 0x10, 0x64, 0x12, 0x13, 0x0a, 0x0f,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x66,
	0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x10, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x31, 0x33, 0x10, 0x68, 0x12,
	0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x31, 0x34, 0x10, 0x69, 0x12, 0x0b, 0x0a, 0x07,
	0x4b, 0x45, 0x59, 0x5f, 0x46, 0x31, 0x35, 0x10, 0x6a, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59,
	0x5f, 0x46, 0x31, 0x36, 0x10, 0x6b, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x31,
	0x37, 0x10, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x31, 0x38, 0x10, 0x6d,
	0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x31, 0x39, 0x10, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x32, 0x30, 0x10, 0x6f, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45,
	0x59, 0x5f, 0x46, 0x32, 0x31, 0x10, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46,
	0x32, 0x32, 0x10, 0x71, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x32, 0x33, 0x10,
	0x72, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x32, 0x34, 0x10, 0x73, 0x12, 0x0f,
	0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x10, 0x74, 0x12,
	0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x65, 0x6c, 0x70, 0x10, 0x75, 0x12, 0x0c, 0x0a,
	0x08, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x65, 0x6e, 0x75, 0x10, 0x76, 0x12, 0x0e, 0x0a, 0x0a, 0x4b,
	0x45, 0x59, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x77, 0x12, 0x0c, 0x0a, 0x08, 0x4b,
	0x45, 0x59, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x78, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x10, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f,
	0x55, 0x6e, 0x64, 0x6f, 0x10, 0x7a, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x75,
	0x74, 0x10, 0x7b, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x6f, 0x70, 0x79, 0x10,
	0x7c, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x61, 0x73, 0x74, 0x65, 0x10, 0x7d,
	0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x10, 0x7e, 0x12, 0x0c,
	0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x75, 0x74, 0x65, 0x10, 0x7f, 0x12, 0x11, 0x0a, 0x0c,
	0x4b, 0x45, 0x59, 0x5f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x70, 0x10, 0x80, 0x01, 0x12,
	0x13, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x10, 0x81, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x82, 0x01, 0x12, 0x17,
	0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d,
	0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x83, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x4b, 0x45, 0x59, 0x5f, 0x4c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x6b,
	0x10, 0x84, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x10, 0x85, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44,
	0x5f, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x10, 0x86, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x31, 0x10, 0x87, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x32, 0x10, 0x88, 0x01, 0x12,
	0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x33, 0x10, 0x89, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x34, 0x10, 0x8a,
	0x01, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x35, 0x10, 0x8b, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45,
	0x59, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x36,
	0x10, 0x8c, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x37, 0x10, 0x8d, 0x01, 0x12, 0x17, 0x0a, 0x12,
	0x4b, 0x45, 0x59, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x38, 0x10, 0x8e, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x39, 0x10, 0x8f, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x31, 0x10, 0x90, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x32, 0x10, 0x91, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x33, 0x10, 0x92, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x34, 0x10, 0x93, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x35, 0x10, 0x94, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x36, 0x10, 0x95, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x37, 0x10, 0x96, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x38, 0x10, 0x97, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x39, 0x10, 0x98, 0x01, 0x12, 0x17,
	0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x45,
	0x72, 0x61, 0x73, 0x65, 0x10, 0x99, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4b, 0x45, 0x59, 0x5f, 0x53,
	0x79, 0x73, 0x52, 0x65, 0x71, 0x5f, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x9a, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x10, 0x9b, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x10, 0x9c, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x10, 0x9d, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x10, 0x9e, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x9f, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f,
	0x4f, 0x75, 0x74, 0x10, 0xa0, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x70,
	0x65, 0x72, 0x10, 0xa1, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x5f, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x10, 0xa2, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4b,
	0x45, 0x59, 0x5f, 0x43, 0x72, 0x53, 0x65, 0x6c, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x10, 0xa3,
	0x01, 0x12, 0x0e, 0x0a, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x78, 0x53, 0x65, 0x6c, 0x10, 0xa4,
	0x01, 0x12, 0x0e, 0x0a, 0x09, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x30, 0x30, 0x10, 0xb0,
	0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x30, 0x30, 0x30, 0x10,
	0xb1, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x68, 0x6f, 0x75, 0x73, 0x61,
	0x6e, 0x64, 0x73, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0xb2, 0x01, 0x12,
	0x19, 0x0a, 0x14, 0x4b, 0x45, 0x59, 0x5f, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0xb3, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4b, 0x45,
	0x59, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x10, 0xb4,
	0x01, 0x12, 0x18, 0x0a, 0x13, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x10, 0xb5, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x4b,
	0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x10, 0xb6, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x4b, 0x45, 0x59, 0x50,
	0x41, 0x44, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x10, 0xb7, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44,
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x42, 0x72, 0x61, 0x63, 0x65, 0x10, 0xb8, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x72, 0x61,
	0x63, 0x65, 0x10, 0xb9, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f,
	0x54, 0x61, 0x62, 0x10, 0xba, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44,
	0x5f, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0xbb, 0x01, 0x12, 0x0d, 0x0a,
	0x08, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x41, 0x10, 0xbc, 0x01, 0x12, 0x0d, 0x0a, 0x08,
	0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x42, 0x10, 0xbd, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x4b,
	0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x43, 0x10, 0xbe, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x4b, 0x45,
	0x59, 0x50, 0x41, 0x44, 0x5f, 0x44, 0x10, 0xbf, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x4b, 0x45, 0x59,
	0x50, 0x41, 0x44, 0x5f, 0x45, 0x10, 0xc0, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x50,
	0x41, 0x44, 0x5f, 0x46, 0x10, 0xc1, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4b, 0x45, 0x59, 0x50, 0x41,
	0x44, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0xc2, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x50,
	0x41, 0x44, 0x5f, 0x43, 0x61, 0x72, 0x65, 0x74, 0x10, 0xc3, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x4b,
	0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x10, 0xc4, 0x01,
	0x12, 0x14, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4c, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x61, 0x6e, 0x10, 0xc5, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44,
	0x5f, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x10, 0xc6, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x41, 0x6d, 0x70, 0x65, 0x72, 0x73,
	0x61, 0x6e, 0x64, 0x10, 0xc7, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44,
	0x5f, 0x41, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x61, 0x6e, 0x64, 0x41, 0x6d, 0x70, 0x65, 0x72, 0x73,
	0x61, 0x6e, 0x64, 0x10, 0xc8, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44,
	0x5f, 0x50, 0x69, 0x70, 0x65, 0x10, 0xc9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x50,
	0x41, 0x44, 0x5f, 0x50, 0x69, 0x70, 0x65, 0x50, 0x69, 0x70, 0x65, 0x10, 0xca, 0x01, 0x12, 0x11,
	0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x10, 0xcb,
	0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x50, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0xcc, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x10, 0xcd, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x4b, 0x45, 0x59, 0x50, 0x41,
	0x44, 0x5f, 0x41, 0x74, 0x10, 0xce, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x50, 0x41,
	0x44, 0x5f, 0x45, 0x78, 0x63, 0x6c, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xcf, 0x01,
	0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xd0, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4b, 0x45, 0x59,
	0x50, 0x41, 0x44, 0x5f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x10, 0xd1, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x10, 0xd2, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x10, 0xd3, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0xd4, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x10, 0xd5, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4b,
	0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x10, 0xd6, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f,
	0x50, 0x6c, 0x75, 0x73, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0xd7, 0x01, 0x12, 0x11, 0x0a, 0x0c,
	0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x10, 0xd8, 0x01, 0x12,
	0x16, 0x0a, 0x11, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x10, 0xd9, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x50, 0x41,
	0x44, 0x5f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0xda, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4b,
	0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x4f, 0x63, 0x74, 0x61, 0x6c, 0x10, 0xdb, 0x01, 0x12, 0x13,
	0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x10, 0xdc, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x5f, 0x48, 0x65,
	0x78, 0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0xdd, 0x01, 0x12, 0x14, 0x0a, 0x0f,
	0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10,
	0xe0, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x10, 0xe1, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x65,
	0x66, 0x74, 0x41, 0x6c, 0x74, 0x10, 0xe2, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f,
	0x4c, 0x65, 0x66, 0x74, 0x47, 0x55, 0x49, 0x10, 0xe3, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4b, 0x45,
	0x59, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0xe4,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x10, 0xe5, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x6c, 0x74, 0x10, 0xe6, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4b, 0x45, 0x59,
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x47, 0x55, 0x49, 0x10, 0xe7, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4b, 0x45,
	0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d, 0x55, 0x54,
	0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x56, 0x4f, 0x4c, 0x5f, 0x55, 0x50, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x56, 0x4f, 0x4c, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0a, 0x4e,
	0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x10, 0xe9, 0x01, 0x12, 0x13, 0x0a, 0x0e,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x10, 0xea,
	0x01, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x10, 0xeb, 0x01, 0x12, 0x0f, 0x0a, 0x0a,
	0x50, 0x6c, 0x61, 0x79, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0xec, 0x01, 0x12, 0x09, 0x0a,
	0x04, 0x4d, 0x75, 0x74, 0x65, 0x10, 0xed, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x5f,
	0x55, 0x70, 0x10, 0xee, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x5f, 0x44, 0x6f, 0x77,
	0x6e, 0x10, 0xef, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x10, 0xf0, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6c, 0x10,
	0xf1, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x10, 0xf2, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x57, 0x57, 0x57, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x10, 0xf4, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x57, 0x57, 0x57, 0x5f, 0x48, 0x6f, 0x6d, 0x65,
	0x10, 0xf5, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x57, 0x57, 0x57, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x10,
	0xf6, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x57, 0x57, 0x57, 0x5f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x10, 0xf7, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x57, 0x57, 0x57, 0x5f, 0x53, 0x74, 0x6f, 0x70,
	0x10, 0xf8, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x57, 0x57, 0x57, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x10, 0xf9, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x57, 0x57, 0x57, 0x5f, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x10, 0xfa, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x42, 0x0b, 0x5a,
	0x09, 0x2f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_firmware_proto_rawDescOnce sync.Once
	file_firmware_proto_rawDescData = file_firmware_proto_rawDesc
)

func file_firmware_proto_rawDescGZIP() []byte {
	file_firmware_proto_rawDescOnce.Do(func() {
		file_firmware_proto_rawDescData = protoimpl.X.CompressGZIP(file_firmware_proto_rawDescData)
	})
	return file_firmware_proto_rawDescData
}

var file_firmware_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_firmware_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_firmware_proto_goTypes = []interface{}{
	(Modifiers)(0),         // 0: firmware.Modifiers
	(HIDKeyboardKey)(0),    // 1: firmware.HIDKeyboardKey
	(*ProgramSet)(nil),     // 2: firmware.ProgramSet
	(*Program)(nil),        // 3: firmware.Program
	(*ButtonBinding)(nil),  // 4: firmware.ButtonBinding
	(*ButtonBindings)(nil), // 5: firmware.ButtonBindings
}
var file_firmware_proto_depIdxs = []int32{
	0,  // 0: firmware.ProgramSet.modifier:type_name -> firmware.Modifiers
	1,  // 1: firmware.ProgramSet.keys:type_name -> firmware.HIDKeyboardKey
	2,  // 2: firmware.Program.program_set:type_name -> firmware.ProgramSet
	1,  // 3: firmware.ButtonBinding.key:type_name -> firmware.HIDKeyboardKey
	3,  // 4: firmware.ButtonBinding.program:type_name -> firmware.Program
	4,  // 5: firmware.ButtonBindings.button1:type_name -> firmware.ButtonBinding
	4,  // 6: firmware.ButtonBindings.button2:type_name -> firmware.ButtonBinding
	4,  // 7: firmware.ButtonBindings.button3:type_name -> firmware.ButtonBinding
	4,  // 8: firmware.ButtonBindings.button4:type_name -> firmware.ButtonBinding
	4,  // 9: firmware.ButtonBindings.button5:type_name -> firmware.ButtonBinding
	4,  // 10: firmware.ButtonBindings.button6:type_name -> firmware.ButtonBinding
	4,  // 11: firmware.ButtonBindings.button7:type_name -> firmware.ButtonBinding
	4,  // 12: firmware.ButtonBindings.button8:type_name -> firmware.ButtonBinding
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_firmware_proto_init() }
func file_firmware_proto_init() {
	if File_firmware_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_firmware_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgramSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firmware_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Program); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firmware_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ButtonBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_firmware_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ButtonBindings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_firmware_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ButtonBinding_Key)(nil),
		(*ButtonBinding_String_)(nil),
		(*ButtonBinding_Program)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_firmware_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_firmware_proto_goTypes,
		DependencyIndexes: file_firmware_proto_depIdxs,
		EnumInfos:         file_firmware_proto_enumTypes,
		MessageInfos:      file_firmware_proto_msgTypes,
	}.Build()
	File_firmware_proto = out.File
	file_firmware_proto_rawDesc = nil
	file_firmware_proto_goTypes = nil
	file_firmware_proto_depIdxs = nil
}
